{"version":3,"sources":["components/FolderContainer.module.css","components/BreadCrumb.js","components/Add.js","components/FolderContainer.js","components/App.js","index.js","components/Add.module.css"],"names":["module","exports","BreadCrumb","folderArray","index","getActiveCrumb","postUpdateIndex","useState","crumbList","setCrumbList","useEffect","length","className","map","crumb","name","split","onClick","slice","handleCrumb","Modal","setAppElement","Add","triggerPush","activeCrumb","modalIsOpen","setmodalIsOpen","link","setLink","inputValue","setInputValue","classes","modal","isOpen","onRequestClose","style","width","onChange","e","target","value","replaceAll","handleChange","type","placeholder","disabled","marginLeft","class","FolderContainer","getIndex","deleteFolder","editFolder","activeFolder","setActiveFolder","folder","x","includes","float","stopPropagation","handleEdit","window","confirm","handleDelete","Modalclasses","App","setFolderArray","setIndex","setActiveCrumb","join","newName","final","newArray","element","newArr","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dba8025.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"folder\":\"FolderContainer_folder__2tHsf\"};","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, {useState, useEffect, Fragment} from 'react'\n\nfunction BreadCrumb({ folderArray, index, getActiveCrumb, postUpdateIndex }) {\n    \n\n    const [crumbList, setCrumbList] = useState([]);\n    //to be continued from here\n\n    useEffect(() => {\n        setCrumbList(['MyDrive']);     \n     }, [])\n     useEffect(() => {\n         getActiveCrumb(crumbList);\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n     }, [crumbList])\n    \n    useEffect(() => {\n        if(folderArray.length>=0 && folderArray[index])\n        setCrumbList([...crumbList, folderArray[index]])\n        postUpdateIndex();\n         \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [index])\n\n    const handleCrumb = (name, index) => {\n        getActiveCrumb(name);\n        setCrumbList(crumbList.slice(0, index + 1)); \n\n    }\n       return (\n        <div className=\"ui huge breadcrumb\"> \n            {\n                crumbList.map((crumb, index) => {\n                    var name = crumb.split('/');\n                     return <Fragment key={index} >\n                         <a className={`section active`} onClick={()=>handleCrumb(name, index)} >{name[name.length-1]} </a>\n                        <i className=\"right angle icon divider\"></i>\n                    </Fragment>\n                })    \n            }    \n                \n        </div>\n    )\n}\n\nexport default BreadCrumb\n","import React, {useState} from 'react'\nimport Modal from 'react-modal'\nimport classes from './Add.module.css'\n\nModal.setAppElement('#root');\n\nfunction Add({triggerPush, activeCrumb}) {\n    const [modalIsOpen, setmodalIsOpen] = useState(false);\n    const [link, setLink] = useState(null);\n    const [inputValue, setInputValue] = useState(null);\n\n    const handleChange = (e) => {\n        e.target.value = e.target.value.replaceAll('/', '');\n         setInputValue(e.target.value);\n        setLink(`${activeCrumb}/${e.target.value}`)\n    }\n\n     return (\n        <div>\n            <Modal className={classes.modal} isOpen={modalIsOpen} onRequestClose={() => setmodalIsOpen(false)} >\n                                     <div className=\"ui card\" style={{width : 'inherit'}}>\n                                            <div className=\"content\">\n                                                <div className=\"right floated\" onClick={()=>setmodalIsOpen(false)} ><i className=\"window close icon\"></i></div>\n                                                 Enter Folder Name \n                                            </div>\n                                            <div className=\"image\">\n                                             </div>\n                                             <div className=\"extra content\">\n                                                <div className=\"ui large transparent left icon input\" style={{width : '100%'}}>\n                                                <i className=\"angle double right icon\"></i>\n                            <input  onChange={(e) => handleChange(e) }  type=\"text\" placeholder=\"Name...\"/>\n                                                </div>\n                                            </div>\n                                            <div className=\"content\">\n                                                <span className=\"right floated\">\n                            <button disabled={!inputValue} className=\"ui green button\" onClick={() => { triggerPush(link); setmodalIsOpen(false); setInputValue(null) }} >Create</button>\n                                                </span>\n                                            </div>\n                                            \n                                            </div> \n            </Modal> \n             <button className=\"ui green button\" onClick={() => setmodalIsOpen(true)}>\n                 Add New \n                 <span style = {{marginLeft:'10px'}} ><i class=\"plus icon\"></i></span>\n                 </button>\n            \n        </div>\n    )\n}\n\nexport default Add\n","import React,{useState} from 'react'\nimport classes from './FolderContainer.module.css'\n\nimport Modal from 'react-modal'\nimport Modalclasses from './Add.module.css'\n\nModal.setAppElement('#root');\n\nfunction FolderContainer({ activeCrumb, folderArray, getIndex, deleteFolder, editFolder}) {\n     const [modalIsOpen, setmodalIsOpen] = useState(false);\n    const [link, setLink] = useState(null);\n    const [inputValue, setInputValue] = useState(null);\n    const [activeFolder, setActiveFolder] = useState([]);\n \n    const handleEdit = (e, folder) => {\n        e.stopPropagation();\n        setmodalIsOpen(true);\n        setActiveFolder(folder);\n    }\n\n    const handleDelete = (e, folder) => {\n        e.stopPropagation();\n        var confirmMessage = window.confirm('Are You sure you want to delete this folder ?');\n        if (confirmMessage) {\n            deleteFolder(folder);\n        }\n        \n    }\n     \n\n          return (\n         <div className=\"ui grid\">\n             {\n                   folderArray.map((folder, index) => {\n                       var x = [];\n                       if (folder.includes(activeCrumb + '/')) {\n                           x = folder.split(activeCrumb + '/');\n                            if (!x[x.length - 1].includes('/')) {\n                               return <div  className={`four wide column ${classes.folder}`} key={index} onClick={() => getIndex(index)}>\n                                   <i className=\"folder icon\"></i>\n                                   <span >{x[x.length - 1]}</span>\n                                   <span style={{ float: 'right' }}>\n                                       <i className=\"edit icon\" onClick={(e)=>handleEdit(e,folder)}></i>\n                                       \n                                       <i className=\"trash alternate icon\" onClick={(e)=>handleDelete(e,folder)}></i>\n                                       </span>\n                               </div>\n                           }\n                           else return null;\n \n                       }\n                       else return null;\n                      \n                      \n                 })\n                 } \n                 \n\n                 <Modal className={Modalclasses.modal} isOpen={modalIsOpen} onRequestClose={() => setmodalIsOpen(false)} >\n                                     <div className=\"ui card\" style={{width : 'inherit'}}>\n                                            <div className=\"content\">\n                                                <div className=\"right floated\" onClick={()=>setmodalIsOpen(false)} ><i className=\"window close icon\"></i></div>\n                                                 Enter Folder Name \n                                            </div>\n                                            <div className=\"image\">\n                                             </div>\n                                             <div className=\"extra content\">\n                                                <div className=\"ui large transparent left icon input\" style={{width : '100%'}}>\n                                                <i className=\"angle double right icon\"></i>\n                            <input onChange={(e) => { setInputValue(e.target.value); setLink(e.target.value) }}  type=\"text\" placeholder=\"Name...\"/>\n                                                </div>\n                                            </div>\n                                            <div className=\"content\">\n                                                <span className=\"right floated\">\n                                 <button disabled={!inputValue} className=\"ui green button\" onClick={() => { setmodalIsOpen(false); editFolder(link,activeFolder); setInputValue(null) }} >Change</button>\n                                                </span>\n                                            </div>\n                                            \n                                            </div> \n            </Modal> \n\n         </div>\n    )\n}\n\nexport default FolderContainer\n","import React, {useState} from 'react'\nimport BreadCrumb from './BreadCrumb'\nimport Add from './Add'\nimport FolderContainer from './FolderContainer'\n\n\nfunction App() {\n\n    const [folderArray, setFolderArray] = useState([]);\n    const [index, setIndex] = useState(null);\n    const [activeCrumb, setActiveCrumb] = useState('');\n    \n\n    const triggerPush = (link) => {\n         setFolderArray([...folderArray,link])\n     }\n    \n    const getIndex = (index) => {\n        setIndex(index);\n    }\n\n    const getActiveCrumb = (crumbList)=> {\n        setActiveCrumb(crumbList.join('/'));\n    }\n\n    const deleteFolder = (folder) => {\n        var newArr = folderArray.filter(element => {\n            return !element.includes(folder);\n        })\n        setFolderArray(newArr);\n    }\n\n    const editFolder = (newName, folder) => {\n \n        var x = folder.split('/');\n        x[x.length - 1] = newName;\n        var final = x.join('/');\n  \n        var newArray = folderArray.map(element => {\n            if (element.includes(folder)) {\n                element = element.replaceAll(folder, final);\n            }\n\n            return element;\n                \n        })\n         setFolderArray(newArray);\n        \n    }\n\n    const postUpdateIndex = () => {\n        setIndex(null);\n    }\n\n       return (\n        <div className='ui container'>\n            <br/>\n            <Add activeCrumb={activeCrumb} triggerPush={triggerPush} ></Add>\n            <br/>\n             <BreadCrumb postUpdateIndex={postUpdateIndex} folderArray={folderArray} index={index} getActiveCrumb={getActiveCrumb}></BreadCrumb>\n             <br/>\n             <br/>\n             <br/>\n            <FolderContainer editFolder = {editFolder}  deleteFolder={deleteFolder} activeCrumb={activeCrumb} folderArray={folderArray} getIndex={getIndex} ></FolderContainer>\n \n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n     <App />,\n   document.getElementById('root')\n);\n\n \n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Add_modal__1DS9L\"};"],"sourceRoot":""}